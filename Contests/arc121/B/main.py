#!/usr/bin/env python3
import sys
from operator import itemgetter


def calc_min(t):

    diff = 10**16

    old_n = int(t[0][0])
    old_c = t[0][1]
    for x in t[1:]:
        if not old_c == x[1]:
            v = int(x[0]) - old_n
            old_n = x[0]
            old_c = x[1]
            if v < diff:
                diff = v
        else:
            old_n = x[0]

    return diff


def solve(N: int, AC: "List[int]"):

    count = [0, 0, 0]

    for ac in AC:
        if ac[1] == 'R':
            count[0] += 1
        if ac[1] == 'G':
            count[1] += 1
        if ac[1] == 'B':
            count[2] += 1

    count = [x % 2 for x in count]

    if 1 in count:

        ac = sorted(AC, key=itemgetter(0))

        RG = [x for x in ac if x[1] == 'R' or x[1] == 'G']
        RB = [x for x in ac if x[1] == 'R' or x[1] == 'B']
        GB = [x for x in ac if x[1] == 'G' or x[1] == 'B']

        RGmin = calc_min(RG)
        RBmin = calc_min(RB)
        GBmin = calc_min(GB)

        if not count[0]:
            print(min(RGmin + RBmin, GBmin))
        if not count[1]:
            print(min(RGmin + GBmin, RBmin))
        if not count[2]:
            print(min(RBmin + GBmin, RGmin))

    else:
        print(0)

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    input = sys.stdin.readline

    N = int(input())  # type: int
    AC = [list(map(str, input().split())) for _ in range(2*N)]
    AC = [[int(x[0]), x[1]] for x in AC]
    solve(N, AC)


if __name__ == '__main__':
    main()
