#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, S: "List[str]", T: "List[str]"):

    for i, s in enumerate(S):
        j = s.find('#')
        if not j == -1:
            s_first = [i, j]
            break

    s_count = 0
    for s in S:
        s_count += s.count('#')
        
    t_count = 0
    for t in T:
        t_count += t.count('#')

    if s_count != t_count:
        print(NO)
        return
        
    for _ in range(4):
        for i, t in enumerate(T):
            j = t.find('#')
            if not j == -1:
                t_first = [i, j]
                break

        diff = [s_first[0]-t_first[0], s_first[1]-t_first[1]]
        
        if diff[0] < 0:
            dt = []
            dt_end = ['.' * N] * (-1 * diff[0])
            
            for t in T[-diff[0]:]:
                dt.append(slide(t, diff[1]))

            dt += dt_end
            
        elif diff[0] > 0:
            dt = ['.' * N] * diff[0]

            for t in T[:diff[0]]:
                dt.append(slide(t, diff[1]))
            
        else:
            dt = []
            for t in T:
                dt.append(slide(t, diff[1]))

        if S == dt:
            print(YES)
            return

        T = rotate(N, T)

    print(NO)
    return


def slide(s: str, i: int):

    if i < 0:
        s = s[-i:] + ('.')*-i
    elif i > 0:
        s = ('.')*i + s[:-i]
    
    return s


def rotate(N: int, t: "List[str]"):

    r = [''] * N
    
    for i in range(N):
        for j in range(N)[::-1]:
            r[i] += t[j][i]

    return r

# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    T = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S, T)

if __name__ == '__main__':
    main()
