#!/usr/bin/env python3
import sys


def bs(ok, ng, target):
    while ng - ok > 1:
        p = (ok + ng) // 2
        res = check(p, target)
        if res:
            ok = p
        else:
            ng = p

    return ok


def check(x, target) -> bool:
    tmp = set()
    for t in target:
        tmp.add(sum(1 << i for i in range(5) if t[i] >= x))

    for x in tmp:
        for y in tmp:
            for z in tmp:
                if x | y | z == 31:
                    return True

    return False


def solve(N: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]", E: "List[int]"):

    members = [[A[i], B[i], C[i], D[i], E[i]] for i in range(N)]

    print(bs(0, 10**9+1, members))

    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    C = [int()] * (N)  # type: "List[int]"
    D = [int()] * (N)  # type: "List[int]"
    E = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
        E[i] = int(next(tokens))
    solve(N, A, B, C, D, E)


if __name__ == '__main__':
    main()
