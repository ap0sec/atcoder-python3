#!/usr/bin/env python3
import sys

INF = 10**9


def make_graph(N, A, B):
    graph = [[] for i in range(N)]
    for i in range(N-1):
        graph[A[i]-1].append(B[i]-1)
        graph[B[i]-1].append(A[i]-1)
    return graph


def BFS(x, N, graph):

    dist = [INF for i in range(N)]
    queue = []
    dist[x] = 0
    queue.append(x)
    while queue:
        target = queue.pop(0)
        for i in graph[target]:
            if dist[i] == INF:
                dist[i] = dist[target] + 1
                queue.append(i)

    return dist


def solve(N: int, A: "List[int]", B: "List[int]"):
    graph = make_graph(N, A, B)
    c1 = BFS(0, N, graph)
    c1_index = c1.index(max(c1))
    print(max(BFS(c1_index, N, graph))+1)

    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)


if __name__ == '__main__':
    main()
