#!/usr/bin/env python3
import sys
import math

INF = 10**9+7


def bs(ok, ng, target):
    while ng - ok > 1:
        p = (ok + ng) // 2
        if check(p, target):
            ok = p
        else:
            ng = p

    return ok


def check(x, target) -> bool:
    a = target[0]
    A = target[1]

    c = A[x]

    if (A[a]+180) % 360 < c:
        return False
    else:
        return True


def solve(N: int, X: "List[int]", Y: "List[int]"):

    A = [0 for _ in range(N)]
    ret_val = 0
    for b in range(N):
        for a in range(N):
            if a != b:
                A[a] = math.degrees(math.atan2(Y[a]-Y[b], X[a]-X[b]))
            else:
                A[a] = INF
        A = sorted(A)

        for a in range(N-1):
            c1 = bs(0, N-1, [a, A])
            if c1+1 <= N:
                c2 = c1+1
            else:
                c2 = c1

            deg1 = min(abs(A[a] - A[c1]), 360-abs(A[a] - A[c1]))
            deg2 = min(abs(A[a] - A[c2]), 360-abs(A[a] - A[c2]))
            ret_val = max(ret_val, deg1, deg2)

    print(ret_val)
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, X, Y)


if __name__ == '__main__':
    main()
