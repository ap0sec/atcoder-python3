#!/usr/bin/env python3
import sys


def solve(H: int, W: int, A: "List[List[int]]"):

    sum_H = [sum(A[i]) for i in range(H)]
    sum_W = [sum([A[i][j] for i in range(H)]) for j in range(W)]

    for i in range(H):
        print(' '.join([str(sum_H[i] + sum_W[j] - A[i][j]) for j in range(W)]))

# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    # def iterate_tokens():
    #     for line in sys.stdin:
    #         for word in line.split():
    #             yield word
    # tokens = iterate_tokens()
    # H = int(next(tokens))  # type: int
    # W = int(next(tokens))  # type: int
    # A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"

    H, W = map(int, input().split())
    A = [list(map(int, input().split())) for l in range(H)]
    solve(H, W, A)


if __name__ == '__main__':
    main()
