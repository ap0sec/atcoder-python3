#!/usr/bin/env python3
import sys


def bs(ok, ng, target):
    while ng - ok > 1:
        p = (ok + ng) // 2
        # print(p)
        res = check(p, target)
        # print(res)
        if res:
            ok = p
        else:
            ng = p

    return ok


def check(x, target) -> bool:
    b = target[0]
    sA = target[1]

    if sA[x] > b:
        return False
    else:
        return True


def solve(N: int, A: "List[int]", Q: int, B: "List[int]"):
    sA = sorted(A)

    # print(sA)
    # print(B)

    for b in B:
        pivot = bs(0, N, [b, sA])
        diff_s = abs(sA[pivot] - b)
        if pivot+1 != N:
            diff_l = abs(sA[pivot+1] - b)
        else:
            diff_l = abs(sA[pivot] - b)
        print(min(diff_s, diff_l))
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    B = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, A, Q, B)


if __name__ == '__main__':
    main()
